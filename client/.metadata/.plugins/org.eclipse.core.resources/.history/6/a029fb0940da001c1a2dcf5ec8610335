"JavaTest" == "콘솔 프로그램 1개"
"ClientTest" == "웹사이트 1개"

Hello World!

콘솔 응용프로그램의 자원
1. *.java
2. *.txt
3. ..


웹 응용프로그램의 자원
1. *.html
2. *.css
3. *.js
4. *.jsp
5. *.java
6. *.txt
7. ..

src > main > webapp > New > HTML File > "hello.html"



개발 환경 & 실행 환경
- 웹 서비스 구현
- 제공하는 쪽: 웹 서버 > Apache Tomcat
- 제공받는 쪽: 웹 클라이언트 > 브라우저(Chrome, Edge, IE, FireFox..)
- 개발툴: 이클립스(IDE)


웹 클라이언트(브라우저) -> 웹 서버
- URL 사용


- http://www.naver.com
- http://www.naver.com:80
- http://localhost:8090/ClientTest/hello.html

1. http://
	- Hyper Text Transfer Protocol > 웹 페이지를 주고 받는 통신 규칙
	- Scheme
	- Protocol(*)
	- 서버와 클라이언트간에 데이터를 주고받기 위한 약속
	- 무전기 > 대화 약속!! > 어쩌구 저쩌구 오바. > 규칙!!
	

2. naver.com
   localhost(127.0.0.1)
	- Domain > DNS > Server IP Address
	- Server IP Address
	- 서버측 호스트(컴퓨터)를 찾는 주소
	
3. :80
   :8090
	- 웹 서버 통신 포트 번호
	- 웹 서비스를 하기 위한 포트 번호
	- 80 > http:// 프로토콜을 위한 예약 포트 번호(전세계)


4. http://www.naver.com
   http://localhost:8090/ClientTest
   	- 브라우저가 웹 서버에 접속하기 위해 지정한 서버측 주소
   	- 위의 주소를 통해 상대방 컴퓨터를 찾을 수 있다.
   	- 왜 찾았나? 목적? > 상대방 컴퓨터의 저장장치에 들어있는 자원을 요청하기 위해서!!
   	- 서버와 클라이언트간의 최소한의 약속
   		- 위의 주소를 접속하면, 내(웹서버)가 내 저장장치에 있는 특정 폴더를 열어 줄테니 접속해서 보고싶은거 마음대로 가져가라~ > 웹 서버 프로그램 사용해서 지정 > "webapp"
   	- 외부 > httl://localhost:8090/hello.html
   	- 내부 > webapp/hello.html
   		
   	- 내부 > webapp/sub/hi.html
   	- 외부 > http://localhost:8090/ClientTest/sub/hi.html
   	

5. http://localhost:8090/ClientTest/htllo.html
   http://localhost:8090/client/hello.html
   http://localhost:8090/hello.html
	- URL을 전부 소문자로 작성
	- ClitentTest > Context Root Path



















